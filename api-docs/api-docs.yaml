openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: https://localhost:8443
  description: Generated server url
paths:
  /api/users/{id}:
    get:
      tags:
      - user-rest-controller
      summary: Finds the user information
      operationId: findUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returns the information of a requested user
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FindUserResponseDto'
        "404":
          description: There was no user associated with the provided user id
        "401":
          description: The requester is not authorized to perform this operation
    put:
      tags:
      - user-rest-controller
      summary: Updates the information of a user
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestDto'
        required: true
      responses:
        "200":
          description: The information update of the user was successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateUserResponseDto'
        "404":
          description: There was no user associated with the provided user id
        "400":
          description: The provided input was not valid
  /api/sales/otd:
    get:
      tags:
      - sale-rest-controller
      summary: Checks the application of a one time discount for a given product
      operationId: findOneTimeDiscount
      responses:
        "404":
          description: There is currently no one time discount active
        "200":
          description: Obtains the current one time discount
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FindOtdResponseDto'
        "400":
          description: It's not possible to apply the one time discount
    put:
      tags:
      - sale-rest-controller
      summary: Updates the one time discount for a given user
      operationId: updateOtdSale
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOtdSaleRequestDto'
        required: true
      responses:
        "401":
          description: It's not possible to update the one time discount
        "200":
          description: Updates the current one time discount
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateSaleResponseDto'
  /api/sales/ad:
    get:
      tags:
      - sale-rest-controller
      summary: Checks the application of a cumulative discount for a given product
      operationId: findAccumulativeDiscount
      responses:
        "400":
          description: It's not possible to apply the cumulative discount
        "404":
          description: There is currently no cumulative discount active
        "200":
          description: Obtains the cumulative one time discount
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FindAdResponseDto'
    put:
      tags:
      - sale-rest-controller
      summary: Updates the cumulative discount for a given user
      operationId: updateAdSale
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAdSaleRequestDto'
        required: true
      responses:
        "401":
          description: It's not possible to update the cumulative discount
        "200":
          description: Updates the current cumulative discount
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateSaleResponseDto'
  /api/users:
    get:
      tags:
      - user-rest-controller
      summary: Finds a paginated list of users
      operationId: findUsers
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: amount
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: The list of users was retrieved successfully
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FindUserResponseDto'
        "404":
          description: There are no users available for the provided pagination information
        "401":
          description: The requester is not authorized to perform this operation
    post:
      tags:
      - user-rest-controller
      summary: Registers a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequestDto'
        required: true
      responses:
        "201":
          description: The new user creation was successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RegisterUserResponseDto'
        "400":
          description: The provided input was not valid
  /api/users/{id}/enable:
    post:
      tags:
      - user-rest-controller
      summary: Enables a user account
      operationId: enableUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The user account was successfully enabled
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FindUserResponseDto'
        "404":
          description: There is no user account associated to the given user id
        "401":
          description: The requester is not authorized to perform this operation
  /api/users/{id}/disable:
    post:
      tags:
      - user-rest-controller
      summary: Disables a user account
      operationId: disableUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The user account was successfully disabled
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FindUserResponseDto'
        "404":
          description: There is no user account associated to the given user id
        "401":
          description: The requester is not authorized to perform this operation
  /api/tokens/validate:
    post:
      tags:
      - token-rest-controller
      summary: Validates a given token
      operationId: validateToken
      responses:
        "200":
          description: Returns the validation response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ValidateTokenResponseDto'
        "400":
          description: No valid token was provided
  /api/tokens/generate:
    post:
      tags:
      - token-rest-controller
      summary: Generates a token for the provided user credentials
      operationId: generateToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateTokenRequestDto'
        required: true
      responses:
        "200":
          description: Returns the generated token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GenerateTokenResponseDto'
        "400":
          description: The provided credentials to generate a token were invalid
  /api/sales/otd/disable:
    post:
      tags:
      - sale-rest-controller
      summary: Disable the one time discount for a given user
      operationId: disableOtdSale
      responses:
        "401":
          description: It's not possible to disable the one time discount because
            the user is not authorized to perform the operation
        "400":
          description: It's not possible to disable the one time discount because
            it's already disabled
        "200":
          description: Disable the current one time discount
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DisableSaleResponseDto'
  /api/sales/ad/disable:
    post:
      tags:
      - sale-rest-controller
      summary: Disable the cumulative discount for a given user
      operationId: disableAdSale
      responses:
        "401":
          description: It's not possible to disable the cumulative discount because
            the user is not authorized
        "400":
          description: It's not possible to disable the cumulative discount because
            it's already disabled
        "200":
          description: Disables the current cumulative discount
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DisableSaleResponseDto'
  /api/products/{id}/purchase:
    post:
      tags:
      - product-rest-controller
      summary: Finds an order with all the userÂ´s products
      operationId: placeOrder
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Cannot perform the order because the product does not exist
        "200":
          description: The order from the user was found succesfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PlaceOrderResponseDto'
        "400":
          description: Cannot perform placing order
  /api/orders/{id}/renew:
    post:
      tags:
      - order-rest-controller
      summary: Returns if the renewal of a service has been successful
      operationId: renewOrder
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "401":
          description: The logged user does not have permission or does not have the
            service in question to renew it
        "200":
          description: The order has been renewed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RenewOrderResponseDto'
  /api/orders/{id}/cancel:
    post:
      tags:
      - order-rest-controller
      summary: Returns if the cancellation of a service has been successful
      operationId: cancelOrder
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The order has been canceled
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CancelOrderResponseDto'
        "404":
          description: The service to be cancelled was not found
        "401":
          description: The logged user does not have permission or does not have the
            service in question to cancel it
  /api/users/{id}/picture:
    get:
      tags:
      - user-rest-controller
      summary: Delivers an image in binary format
      operationId: getImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The image was successfully delivered
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/FindUserResponseDto'
            image/png:
              schema:
                $ref: '#/components/schemas/FindUserResponseDto'
        "404":
          description: The requested image was not found
        "401":
          description: The requester is not authorized to perform this operation
  /api/statistics:
    get:
      tags:
      - statistics-rest-controller
      summary: Finds the statistics associated to the sales
      operationId: findStatistics
      responses:
        "200":
          description: The sales statistics were found successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatisticsResponseDto'
        "401":
          description: The requester is not authorized to perform this operation
  /api/products:
    get:
      tags:
      - product-rest-controller
      summary: Finds a list of all products
      operationId: findAllProducts
      responses:
        "400":
          description: Can not access to find products
        "404":
          description: There were no more products to be shown
        "200":
          description: The list of products was found succesfully
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FindProductResponseDto'
  /api/orders:
    get:
      tags:
      - order-rest-controller
      summary: Returns a certain amount of pages with a certain amount of services
        from the logged user
      operationId: findServices
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: amount
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: There were no services to be found from the logged user
        "200":
          description: Returns the generated pages with the services
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FindOrderResponseDto'
  /api/orders/{id}:
    get:
      tags:
      - order-rest-controller
      summary: "Returns a service given a serviceId, if the logged user has it"
      operationId: findService
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "401":
          description: The logged user does not have permission or does not have the
            service in question
        "404":
          description: The service in question was not found
        "200":
          description: Returns the solicited service
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FindOrderResponseDto'
  /api/orders/{id}/export:
    get:
      tags:
      - order-rest-controller
      summary: Returns a pdf of an order given its orderId
      operationId: exportOrderToPdf
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: The service to be exported to pdf was not found
        "401":
          description: The logged used does not have permissions to generate a pdf
            from the orderId provided
  /api/error:
    get:
      tags:
      - error-rest-controller
      summary: Send an error if some process has failed o the page does not exist
      operationId: error_1
      responses:
        "400":
          description: There was an error when trying to perform a operation
    put:
      tags:
      - error-rest-controller
      summary: Send an error if some process has failed o the page does not exist
      operationId: error_6
      responses:
        "400":
          description: There was an error when trying to perform a operation
    post:
      tags:
      - error-rest-controller
      summary: Send an error if some process has failed o the page does not exist
      operationId: error_4
      responses:
        "400":
          description: There was an error when trying to perform a operation
    delete:
      tags:
      - error-rest-controller
      summary: Send an error if some process has failed o the page does not exist
      operationId: error_2
      responses:
        "400":
          description: There was an error when trying to perform a operation
    options:
      tags:
      - error-rest-controller
      summary: Send an error if some process has failed o the page does not exist
      operationId: error_5
      responses:
        "400":
          description: There was an error when trying to perform a operation
    head:
      tags:
      - error-rest-controller
      summary: Send an error if some process has failed o the page does not exist
      operationId: error_3
      responses:
        "400":
          description: There was an error when trying to perform a operation
    patch:
      tags:
      - error-rest-controller
      summary: Send an error if some process has failed o the page does not exist
      operationId: error
      responses:
        "400":
          description: There was an error when trying to perform a operation
components:
  schemas:
    UpdateUserRequestDto:
      type: object
      properties:
        encoded_picture:
          type: string
        content_type:
          type: string
        first_name:
          type: string
        surname:
          type: string
        address:
          type: string
        email:
          type: string
        password:
          type: string
    UpdateUserResponseDto:
      type: object
      properties:
        success:
          type: boolean
    UpdateOtdSaleRequestDto:
      type: object
      properties:
        product_id:
          type: integer
          format: int64
        start:
          type: string
          format: date-time
        stop:
          type: string
          format: date-time
        discount:
          type: integer
          format: int32
    UpdateSaleResponseDto:
      type: object
      properties:
        success:
          type: boolean
    UpdateAdSaleRequestDto:
      type: object
      properties:
        product_id:
          type: integer
          format: int64
        start:
          type: string
          format: date-time
        stop:
          type: string
          format: date-time
        discount:
          type: integer
          format: int32
        amount:
          type: integer
          format: int32
    RegisterUserRequestDto:
      required:
      - address
      - email
      - first_name
      - password
      - surname
      type: object
      properties:
        first_name:
          pattern: "^[a-zA-Z -]+$"
          type: string
        surname:
          pattern: "^[a-zA-Z -]+$"
          type: string
        address:
          type: string
        email:
          maxLength: 255
          minLength: 0
          type: string
        password:
          pattern: "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$"
          type: string
    RegisterUserResponseDto:
      type: object
      properties:
        success:
          type: boolean
    FindUserResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        first_name:
          type: string
        surname:
          type: string
        address:
          type: string
        email:
          type: string
        enabled:
          type: boolean
    ValidateTokenResponseDto:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        token:
          type: string
        is_valid:
          type: boolean
    GenerateTokenRequestDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    GenerateTokenResponseDto:
      type: object
      properties:
        token:
          type: string
        successful:
          type: boolean
    DisableSaleResponseDto:
      type: object
      properties:
        success:
          type: boolean
    PlaceOrderResponseDto:
      type: object
      properties:
        success:
          type: boolean
    RenewOrderResponseDto:
      type: object
      properties:
        success:
          type: boolean
    CancelOrderResponseDto:
      type: object
      properties:
        success:
          type: boolean
    PairStringInteger:
      type: object
      properties:
        value:
          type: integer
          format: int32
        key:
          type: string
        left:
          type: string
        right:
          type: integer
          format: int32
    StatisticsResponseDto:
      type: object
      properties:
        accumulated_capital:
          type: integer
          format: int64
        week_sales:
          type: array
          items:
            type: integer
            format: int32
        category_purchases:
          type: array
          items:
            $ref: '#/components/schemas/PairStringInteger'
    FindOtdResponseDto:
      type: object
      properties:
        price:
          type: integer
          format: int32
        discount:
          type: integer
          format: int32
        discount_price:
          type: integer
          format: int32
        ram:
          type: string
        cores:
          type: string
        storage:
          type: string
        transfer:
          type: string
    FindAdResponseDto:
      type: object
      properties:
        price:
          type: integer
          format: int32
        discount:
          type: integer
          format: int32
        discount_price:
          type: integer
          format: int32
        bulk_amount:
          type: integer
          format: int32
        ram:
          type: string
        cores:
          type: string
        storage:
          type: string
        transfer:
          type: string
    FindProductResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          type: string
        price:
          type: integer
          format: int32
        hourly_price:
          type: number
          format: double
        ram:
          type: string
        cores:
          type: string
        storage:
          type: string
        transfer:
          type: string
    FindOrderResponseDto:
      type: object
      properties:
        order_id:
          type: integer
          format: int64
        category:
          type: string
        purchase_date:
          type: string
          format: date-time
        expiration_date:
          type: string
          format: date-time
        ram:
          type: string
        cores:
          type: string
        storage:
          type: string
        transfer:
          type: string
